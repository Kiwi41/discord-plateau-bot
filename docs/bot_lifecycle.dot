digraph bot_lifecycle {
    rankdir=TB;
    bgcolor="white";
    
    // Styling
    node [shape=box, style=filled, fontname="Arial", fontsize=10];
    edge [fontname="Arial", fontsize=9];
    
    // States styling
    start [label="üöÄ D√©marrage\nnode index.js", shape=ellipse, fillcolor="#4caf50", fontcolor="white"];
    
    // Initialization phase
    subgraph cluster_init {
        label="üîß Phase d'initialisation";
        style=filled;
        fillcolor="#e3f2fd";
        
        config [label="‚öôÔ∏è Chargement config\n(.env, variables)", fillcolor="#bbdefb"];
        discord_connect [label="ü§ñ Connexion Discord\nclient.login(token)", fillcolor="#bbdefb"];
        permissions [label="üîê V√©rification\npermissions", fillcolor="#bbdefb"];
    }
    
    // Ready state
    ready [label="‚úÖ Bot connect√©\n√âv√©nement 'ready'", fillcolor="#c8e6c9", fontcolor="black"];
    
    // Main loop
    subgraph cluster_main {
        label="üîÑ Fonctionnement principal";
        style=filled;
        fillcolor="#f3e5f5";
        
        listen [label="üëÇ √âcoute des\n√©venements Discord", fillcolor="#e1bee7"];
        commands [label="‚å®Ô∏è Traitement\ncommandes (!create-plateau-post)", fillcolor="#e1bee7"];
        cron_trigger [label="‚è∞ D√©clencheur cron\n(samedi 3h00)", fillcolor="#e1bee7"];
    }
    
    // Event processing
    subgraph cluster_process {
        label="üìã Traitement √©v√©nements";
        style=filled;
        fillcolor="#e8f5e8";
        
        fetch_events [label="üîç R√©cup√©ration\n√©v√©nements Discord", fillcolor="#c8e6c9"];
        find_fridays [label="üìÖ Calcul 4 prochains\nvendredis", fillcolor="#c8e6c9"];
        process_friday [label="üéØ Traitement\nun vendredi", fillcolor="#c8e6c9"];
        
        // Decision diamond
        event_found [label="√âv√©nement\ntrouv√© ?", shape=diamond, fillcolor="#ffeb3b"];
        post_exists [label="Post\nexistant ?", shape=diamond, fillcolor="#ffeb3b"];
        needs_update [label="Mise √† jour\nn√©cessaire ?", shape=diamond, fillcolor="#ffeb3b"];
    }
    
    // Actions
    subgraph cluster_actions {
        label="‚ö° Actions du bot";
        style=filled;
        fillcolor="#fff3e0";
        
        create_post [label="üìù Cr√©er\nnouveau post", fillcolor="#ffcc02"];
        update_post [label="üîÑ Mettre √† jour\npost existant", fillcolor="#ffcc02"];
        default_post [label="üìù Post avec\nvaleurs par d√©faut", fillcolor="#ffcc02"];
        log_action [label="üìä Log r√©sultat\net statistiques", fillcolor="#ffcc02"];
    }
    
    // Error handling
    subgraph cluster_error {
        label="üõ†Ô∏è Gestion d'erreurs";
        style=filled;
        fillcolor="#ffebee";
        
        retry [label="üîÑ Retry avec\nd√©lai progressif", fillcolor="#ffcdd2"];
        log_error [label="üìù Log erreur\net context", fillcolor="#ffcdd2"];
        continue_loop [label="‚û°Ô∏è Continuer\nboucle principale", fillcolor="#ffcdd2"];
    }
    
    // Sleep and wait
    sleep [label="üò¥ Attente prochaine\nactivit√©", fillcolor="#f5f5f5"];
    
    // Shutdown
    shutdown [label="üõë Arr√™t du bot\n(SIGTERM, erreur fatale)", 
              shape=ellipse, fillcolor="#f44336", fontcolor="white"];
    
    // Flow - Startup
    start -> config -> discord_connect -> permissions -> ready;
    
    // Flow - Main loop
    ready -> listen;
    listen -> commands [label="Commande re√ßue"];
    listen -> cron_trigger [label="Cron d√©clench√©"];
    listen -> sleep [label="Aucune activit√©"];
    
    // Flow - Command processing
    commands -> fetch_events;
    cron_trigger -> find_fridays;
    
    // Flow - Event processing
    find_fridays -> process_friday [label="Pour chaque vendredi"];
    process_friday -> fetch_events;
    fetch_events -> event_found;
    
    // Decision flows
    event_found -> post_exists [label="‚úÖ Oui"];
    event_found -> default_post [label="‚ùå Non"];
    
    post_exists -> needs_update [label="‚úÖ Oui"];
    post_exists -> create_post [label="‚ùå Non"];
    
    needs_update -> update_post [label="‚úÖ Oui"];
    needs_update -> log_action [label="‚ùå Non", style=dashed];
    
    // Actions flow
    create_post -> log_action;
    update_post -> log_action;
    default_post -> log_action;
    
    // Back to main loop
    log_action -> sleep;
    sleep -> listen;
    
    // Error handling flows
    fetch_events -> retry [label="‚ùå Erreur", color="red"];
    create_post -> retry [label="‚ùå Erreur", color="red"];
    update_post -> retry [label="‚ùå Erreur", color="red"];
    
    retry -> log_error;
    log_error -> continue_loop;
    continue_loop -> sleep;
    
    // Retry success
    retry -> fetch_events [label="‚úÖ Succ√®s", style=dashed, color="green"];
    
    // Shutdown flows
    listen -> shutdown [label="Signal arr√™t", color="red"];
    config -> shutdown [label="Config invalide", color="red"];
    discord_connect -> shutdown [label="Connexion √©chou√©e", color="red"];
    
    // Loop back for next friday
    process_friday -> process_friday [label="Vendredi suivant", style=dashed];
    
    // Timing annotations
    edge [style=dotted, color="gray"];
    cron_trigger -> cron_trigger [label="Chaque samedi 3h00"];
    sleep -> cron_trigger [label="R√©veil programm√©"];
}